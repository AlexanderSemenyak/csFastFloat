using cs_fast_double_parser;
using System;
using System.Collections.Generic;
using System.Text;
using Xunit;

namespace cs_fast_double_parser.Tests
{
  public class Test_NonRegr : BaseTestClass
  {
    [Fact]
    public void cas_ProfLemire()
    {
      Dictionary<string, double> sut = new Dictionary<string, double>();

      // sut.Add("1090544144181609348835077142190", 0x1.b8779f2474dfbp + 99); // TODO
      sut.Add("4503599627370496.5", 4503599627370496.5);
      sut.Add("4503599627370497.5", 4503599627370497.5);
      sut.Add
      sut.Add

      StringBuilder sb = new StringBuilder();

      foreach (KeyValuePair<string, double> kv in sut)
      {
        sb.AppendLine($"Valeur   : {kv.Key} ");
        sb.AppendLine($"Expected : {kv.Value} ");
        sb.AppendLine($"Resultat : {DoubleParser.parse_number2(kv.Key)}");
      }

      ApprovalTests.Approvals.Verify(sb.ToString());
    }

    [Fact]
    private void issue13()
    {
      double? x = DoubleParser.parse_number2("0");
      Assert.True(x.HasValue, "Parsed");
      Assert.True(x == 0, "Maps to 0");
    }

    [Fact]
    private void issue40()
    {
      //https://tools.ietf.org/html/rfc7159
      // A fraction part is a decimal point followed by one or more digits.
      Assert.Throws<System.FormatException>(() => Double.Parse("0."));
    }

    [Fact]
    private void issue32()
    {
      double? x = DoubleParser.parse_number2("-0");
      Assert.True(x.HasValue, "could not parse -zero.");
      Assert.True(x == 0, "-zero does not map to zero.");
    }

    [Fact]
    private void issue23()
    {
      double? x = DoubleParser.parse_number2("0e+42949672970");

      Assert.True(x.HasValue, "could not parse zero.");
      Assert.True(x == 0, "zero does not map to zero.");
    }

    [Fact]
    private void issue23_2()
    {
      double? x = DoubleParser.parse_number2("5e0012");

      Assert.True(x.HasValue, "could not parse 5e0012.");
      Assert.True(x == 5e12, "does not map to 5e0012.");
    }
  }
}