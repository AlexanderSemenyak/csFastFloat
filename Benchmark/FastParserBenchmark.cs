using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Jobs;
using BenchmarkDotNet.Running;
using csFastFloat;
using System;
using System.Net.Sockets;
using System.Security.Authentication.ExtendedProtection;
using System.Security.Cryptography;

[SimpleJob(RuntimeMoniker.NetCoreApp50, baseline: true)]
//[SimpleJob(RuntimeMoniker.NetCoreApp30)]

public class MyBencmark
{
  // [InlineData("9007199254740993.0", "0x1p+53")]
  // [InlineData("9007199254740993.0" + new string('0', 1000), 0x1F + 53)]
  //[InlineData("10000000000000000000", 0x1.158e460913dp + 63)]
  //[InlineData("10000000000000000000000000000001000000000000", 0x1.cb2d6f618c879p + 142)]
  //[InlineData("10000000000000000000000000000000000000000001", 0x1.cb2d6f618c879p + 142)]
  //[InlineData("2.22507385850720212418870147920222032907240528279439037814303133837435107319244194686754406432563881851382188218502438069999947733013005649884107791928741341929297200970481951993067993290969042784064731682041565926728632933630474670123316852983422152744517260835859654566319282835244787787799894310779783833699159288594555213714181128458251145584319223079897504395086859412457230891738946169368372321191373658977977723286698840356390251044443035457396733706583981055420456693824658413747607155981176573877626747665912387199931904006317334709003012790188175203447190250028061277777916798391090578584006464715943810511489154282775041174682194133952466682503431306181587829379004205392375072083366693241580002758391118854188641513168478436313080237596295773983001708984375e-308", 0x1.0000000000002p - 1022)]
  //[InlineData("9355950000000000000.00000000000000000000000000000000001844674407370955161600000184467440737095516161844674407370955161407370955161618446744073709551616000184467440737095516166000001844674407370955161618446744073709551614073709551616184467440737095516160001844674407370955161601844674407370955674451616184467440737095516140737095516161844674407370955161600018446744073709551616018446744073709551611616000184467440737095001844674407370955161600184467440737095516160018446744073709551168164467440737095516160001844073709551616018446744073709551616184467440737095516160001844674407536910751601611616000184467440737095001844674407370955161600184467440737095516160018446744073709551616184467440737095516160001844955161618446744073709551616000184467440753691075160018446744073709", 0x1.03ae05e8fca1cp + 63)]
  //[InlineData("1090544144181609348835077142190", 0x1.b8779f2474dfbp + 99)]
  // [InlineData("3e-324", 0x0.0000000000001F - 1022)]
  //[InlineData("1.00000006e+09", 0x1.dcd651ep + 29)]
  //[InlineData("4.9406564584124653e-324", 0x0.0000000000001p - 1022)]
  //[InlineData("4.9406564584124654e-324", 0x0.0000000000001p - 1022)]
  //[InlineData("2.2250738585072009e-308", 0x0.fffffffffffffp - 1022)]
  //[InlineData("2.2250738585072014e-308", 0x1p - 1022)]
  //[InlineData("1.7976931348623157e308", 0x1.fffffffffffffp + 1023)]
  //[InlineData("1.7976931348623158e308", 0x1.fffffffffffffp + 1023)]
  [Params("1.1920928955078125e-07"
  , "-0"
  , "1.0000000000000006661338147750939242541790008544921875"
  , "2.2250738585072013e-308"
  , "-92666518056446206563E3"
  , "-42823146028335318693e-128"
  , "90054602635948575728E72"
  , "1.00000000000000188558920870223463870174566020691753515394643550663070558368373221972569761144603605635692374830246134201063722058e-309"
  , "0e9999999999999999999999999999"
  , "-2402844368454405395.2"
  , "2402844368454405395.2"
  , "7.0420557077594588669468784357561207962098443483187940792729600000e+59"
  , "-1.7339253062092163730578609458683877051596800000000000000000000000e+42"
  , "-2.0972622234386619214559824785284023792871122537545728000000000000e+52"
  , "-1.0001803374372191849407179462120053338028379051879898808320000000e+57"
  , "-1.8607245283054342363818436991534856973992070520151142825984000000e+58"
  , "-1.9189205311132686907264385602245237137907390376574976000000000000e+52"
  , "-2.8184483231688951563253238886553506793085187889855201280000000000e+54"
  , "-1.7664960224650106892054063261344555646357024359107788800000000000e+53"
  , "-2.1470977154320536489471030463761883783915110400000000000000000000e+45"
  , "-4.4900312744003159009338275160799498340862630046359789166919680000e+61"
  , "+1"
  , "1.797693134862315700000000000000001e308"
  , "4503599627370496.5"
  , "4503599627475352.5"
  , "4503599627475353.5"
  , "2251799813685248.25"
  , "1125899906842624.125"
  , "1125899906842901.875"
  , "2251799813685803.75"
  , "4503599627370497.5"
  , "45035996.273704995"
  , "45035996.273704985"
  , "0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044501477170144022721148195934182639518696390927032912960468522194496444440421538910330590478162701758282983178260792422137401728773891892910553144148156412434867599762821265346585071045737627442980259622449029037796981144446145705102663115100318287949527959668236039986479250965780342141637013812613333119898765515451440315261253813266652951306000184917766328660755595837392240989947807556594098101021612198814605258742579179000071675999344145086087205681577915435923018910334964869420614052182892431445797605163650903606514140377217442262561590244668525767372446430075513332450079650686719491377688478005309963967709758965844137894433796621993967316936280457084866613206797017728916080020698679408551343728867675409720757232455434770912461317493580281734466552734375"
  , "0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072008890245868760858598876504231122409594654935248025624400092282356951787758888037591552642309780950434312085877387158357291821993020294379224223559819827501242041788969571311791082261043971979604000454897391938079198936081525613113376149842043271751033627391549782731594143828136275113838604094249464942286316695429105080201815926642134996606517803095075913058719846423906068637102005108723282784678843631944515866135041223479014792369585208321597621066375401613736583044193603714778355306682834535634005074073040135602968046375918583163124224521599262546494300836851861719422417646455137135420132217031370496583210154654068035397417906022589503023501937519773030945763173210852507299305089761582519159720757232455434770912461317493580281734466552734375"
  , "1438456663141390273526118207642235581183227845246331231162636653790368152091394196930365828634687637948157940776599182791387527135353034738357134110310609455693900824193549772792016543182680519740580354365467985440183598701312257624545562331397018329928613196125590274187720073914818062530830316533158098624984118889298281371812288789537310599037529113415438738954894752124724983067241108764488346454376699018673078404751121414804937224240805993123816932326223683090770561597570457793932985826162604255884529134126396282202126526253389383421806727954588525596114379801269094096329805054803089299736996870951258573010877404407451953846698609198213926882692078557033228265259305481198526059813164469187586693257335779522020407645498684263339921905227556616698129967412891282231685504660671277927198290009824680186319750978665734576683784255802269708917361719466043175201158849097881370477111850171579869056016061666173029059588433776015644439705050377554277696143928278093453792803846252715966016733222646442382892123940052441346822429721593884378212558701004356924243030059517489346646577724622498919752597382095222500311124181823512251071356181769376577651390028297796156208815375089159128394945710515861334486267101797497111125909272505194792870889617179758703442608016143343262159998149700606597792535574457560429226974273443630323818747730771316763398572110874959981923732463076884528677392654150010269822239401993427482376513231389212353583573566376915572650916866553612366187378959554983566712767093372906030188976220169058025354973622211666504549316958271880975697143546564469806791358707318873075708383345004090151974068325838177531266954177406661392229801349994695941509935655355652985723782153570084089560139142231.738475042362596875449154552392299548947138162081694168675340677843807613129780449323363759027012972466987370921816813162658754726545121090545507240267000456594786540949605260722461937870630634874991729398208026467698131898691830012167897399682179601734569071423681e-733")]
  public string sut;

  [Benchmark]
  public void ParseADouble() => FastParser.ParseDouble(sut);

  [Benchmark]
  public void ParseADouble_std() => Double.Parse(sut);

  public class Program
  {
    public static void Main(string[] args)
    {
      var summary = BenchmarkRunner.Run<MyBencmark>();
    }
  }
}